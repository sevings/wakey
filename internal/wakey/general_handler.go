package wakey

import (
	"fmt"
	"net/url"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

type GeneralHandler struct {
	db       *DB
	stateMan *StateManager
	log      *zap.SugaredLogger
	name     string
}

func NewGeneralHandler(db *DB, stateMan *StateManager, log *zap.SugaredLogger, botName string) *GeneralHandler {
	return &GeneralHandler{
		db:       db,
		stateMan: stateMan,
		log:      log,
		name:     botName,
	}
}

func (gh *GeneralHandler) Actions() []string {
	return []string{btnDoNothingID, btnInviteFriendsID, btnShowLinkID}
}

func (gh *GeneralHandler) HandleAction(c tele.Context, action string) error {
	inviteLink := "https://t.me/" + gh.name
	switch action {
	case btnInviteFriendsID:
		err := c.Edit(c.Message().Text + "\n\n" + btnInviteFriendsText)
		if err != nil {
			return err
		}

		message := "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É! –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:"

		inlineKeyboard := &tele.ReplyMarkup{}
		btnShowLink := inlineKeyboard.Data(btnShowLinkText, btnShowLinkID)
		btnShareLink := inlineKeyboard.URL(btnShareLinkText, createShareLink(inviteLink))

		inlineKeyboard.Inline(
			inlineKeyboard.Row(btnShowLink),
			inlineKeyboard.Row(btnShareLink),
		)

		return c.Send(message, inlineKeyboard)
	case btnShowLinkID:
		err := c.Edit(c.Message().Text + "\n\n" + btnShowLinkText)
		if err != nil {
			return err
		}

		message := fmt.Sprintf("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π:\n\n%s\n\n–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤–∞—à–∏–º –¥—Ä—É–∑—å—è–º!", inviteLink)
		return c.Send(message)
	case btnDoNothingID:
		err := c.Edit(c.Message().Text + "\n\n" + btnDoNothingText)
		if err != nil {
			return err
		}

		return c.Send("–•–æ—Ä–æ—à–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –≤–∞–º —á—Ç–æ-—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.")
	default:
		gh.log.Errorw("unexpected action for GeneralHandler", "action", action)
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}
}

func (gh *GeneralHandler) States() []UserState {
	return []UserState{StateSuggestActions, StateCancelAction, StatePrintStats}
}

func (gh *GeneralHandler) HandleState(c tele.Context, state UserState) error {
	switch state {
	case StateSuggestActions:
		return gh.suggestActions(c)
	case StateCancelAction:
		return gh.cancelAction(c)
	case StatePrintStats:
		return gh.printStats(c)
	default:
		gh.log.Errorw("unexpected state for GeneralHandler", "state", state)
		return c.Send("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
	}
}

func createShareLink(botLink string) string {
	sellingText := `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –±–æ—Ç—É ‚Äî –ø–æ–≤—ã—Å—å—Ç–µ —Å–≤–æ—é –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!

–ß—Ç–æ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –º–æ–º–µ–Ω—Ç—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
`

	encodedText := url.QueryEscape(sellingText + "\n\n" + botLink)
	return "https://t.me/share/url?url=" + encodedText
}

func (gh *GeneralHandler) suggestActions(c tele.Context) error {
	userID := c.Sender().ID
	gh.stateMan.ClearState(userID)

	inlineKeyboard := &tele.ReplyMarkup{}

	btnShowProfile := inlineKeyboard.Data(btnShowProfileText, btnShowProfileID)
	btnChangeName := inlineKeyboard.Data(btnChangeNameText, btnChangeNameID)
	btnChangeBio := inlineKeyboard.Data(btnChangeBioText, btnChangeBioID)
	btnChangeTimezone := inlineKeyboard.Data(btnChangeTimezoneText, btnChangeTimezoneID)
	btnChangePlans := inlineKeyboard.Data(btnChangePlansText, btnChangePlansID)
	btnChangeWakeTime := inlineKeyboard.Data(btnChangeWakeTimeText, btnChangeWakeTimeID)
	btnChangeNotifyTime := inlineKeyboard.Data(btnChangeNotifyTimeText, btnChangeNotifyTimeID)
	btnSendWish := inlineKeyboard.Data(btnSendWishYesText, btnSendWishYesID)
	btnInviteFriends := inlineKeyboard.Data(btnInviteFriendsText, btnInviteFriendsID)
	btnDoNothing := inlineKeyboard.Data(btnDoNothingText, btnDoNothingID)

	inlineKeyboard.Inline(
		inlineKeyboard.Row(btnShowProfile),
		inlineKeyboard.Row(btnChangeName),
		inlineKeyboard.Row(btnChangeBio),
		inlineKeyboard.Row(btnChangeTimezone),
		inlineKeyboard.Row(btnChangePlans),
		inlineKeyboard.Row(btnChangeWakeTime),
		inlineKeyboard.Row(btnChangeNotifyTime),
		inlineKeyboard.Row(btnSendWish),
		inlineKeyboard.Row(btnInviteFriends),
		inlineKeyboard.Row(btnDoNothing),
	)

	return c.Send("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", inlineKeyboard)
}

func (gh *GeneralHandler) cancelAction(c tele.Context) error {
	userID := c.Sender().ID
	state, exists := gh.stateMan.GetState(userID)
	if exists && state != StateNone {
		err := c.Send("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
		if err != nil {
			return err
		}
	}

	return gh.suggestActions(c)
}

func (gh *GeneralHandler) printStats(c tele.Context) error {
	stats, err := gh.db.GetStats()
	if err != nil {
		gh.log.Errorw("failed to get stats", "error", err)
		return c.Send("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	message := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤: %d
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π: %d

*–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:*
‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø–ª–∞–Ω–æ–≤ –≤ –¥–µ–Ω—å: %.2f
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ø–æ–∂–µ–ª–∞–Ω–∏–π –≤ –¥–µ–Ω—å: %.2f`,
		stats.TotalUsers,
		stats.TotalPlans,
		stats.TotalWishes,
		stats.NewUsersLast7Days,
		stats.ActiveUsersLast7Days,
		stats.AvgPlansLast7Days,
		stats.AvgWishesLast7Days,
	)

	return c.Send(message, tele.ModeMarkdown)
}
